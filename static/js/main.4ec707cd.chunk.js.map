{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","helpers/getVisibleTodos.ts","components/TodoFilter/TodoFilter.tsx","helpers/debounce.ts","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","currentTodo","action","query","status","initialFilterParams","ALL","filterReducer","filterParams","todos","todosReducer","rootReducer","combineReducers","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","React","memo","dispatch","state","selectedTodo","visibleTodos","useMemo","normalizedQuery","toLowerCase","split","Boolean","join","isSearchQueryMatch","title","includes","isStatusMatch","ACTIVE","completed","COMPLETED","getVisibleTodos","length","className","map","id","onClick","currentTodoActions","selectTodo","cn","TodoFilter","useState","enteredQuery","setEnteredQuery","applyQuery","useCallback","func","delay","timerId","clearTimeout","args","setTimeout","debounce","filterActions","value","onChange","event","target","placeholder","style","pointerEvents","get","url","fullURL","Promise","resolve","then","fetch","res","json","Loader","TodoModal","user","setUser","useEffect","userId","href","email","name","App","isLoading","setIsLoading","isDataLoaded","setIsDataLoaded","loadTodos","a","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ec707cd.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype CurrentTodo = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  currentTodo: CurrentTodo = null,\n  action: Action,\n): CurrentTodo => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return currentTodo;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilterQueryAction = {\n  type: 'filterQuery/SET';\n  payload: string;\n};\n\ntype SetFilterStatusAction = {\n  type: 'filterStatus/SET';\n  payload: Status;\n};\n\nconst setFilterQuery = (query: string): SetFilterQueryAction => ({\n  type: 'filterQuery/SET',\n  payload: query,\n});\n\nconst setFilterStatus = (status: Status): SetFilterStatusAction => ({\n  type: 'filterStatus/SET',\n  payload: status,\n});\n\nexport const actions = { setFilterQuery, setFilterStatus };\n\ntype FilterParams = {\n  query: string;\n  status: Status;\n};\n\ntype Action = SetFilterQueryAction | SetFilterStatusAction;\n\nconst initialFilterParams: FilterParams = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (\n  filterParams: FilterParams = initialFilterParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filterQuery/SET':\n      return { ...filterParams, query: action.payload };\n\n    case 'filterStatus/SET':\n      return { ...filterParams, status: action.payload };\n\n    default:\n      return filterParams;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { getVisibleTodos } from '../../helpers/getVisibleTodos';\n\nexport const TodoList: React.FC = React.memo(() => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todos, query, status)\n  ), [todos, query, status]);\n\n  return (\n    visibleTodos.length === 0\n      ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn(\n                        { 'far fa-eye': selectedTodo?.id !== todo.id },\n                        { 'far fa-eye-slash': selectedTodo?.id === todo.id },\n                      )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ));\n});\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  const normalizedQuery = query\n    .toLowerCase()\n    .split(' ')\n    .filter(Boolean)\n    .join(' ');\n\n  const visibleTodos = todos.filter(todo => {\n    const normalizedTodoTitle = todo.title.toLowerCase();\n    const isSearchQueryMatch = normalizedTodoTitle.includes(normalizedQuery);\n\n    let isStatusMatch = true;\n\n    switch (status) {\n      case Status.ACTIVE:\n        isStatusMatch = !todo.completed;\n        break;\n\n      case Status.COMPLETED:\n        isStatusMatch = todo.completed;\n        break;\n\n      default:\n        isStatusMatch = true;\n    }\n\n    return isSearchQueryMatch && isStatusMatch;\n  });\n\n  return visibleTodos;\n};\n","import React, { useCallback, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { debounce } from '../../helpers/debounce';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = React.memo(() => {\n  const [enteredQuery, setEnteredQuery] = useState('');\n\n  const { status } = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  const setFilterQuery = (query: string) => (\n    dispatch(filterActions.setFilterQuery(query))\n  );\n\n  const applyQuery = useCallback(debounce(setFilterQuery, 500), []);\n\n  const handleChangeFilterQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEnteredQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const handleChangeStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    switch (event.target.value) {\n      case Status.ALL:\n        dispatch(filterActions.setFilterStatus(Status.ALL));\n        break;\n\n      case Status.ACTIVE:\n        dispatch(filterActions.setFilterStatus(Status.ACTIVE));\n        break;\n\n      case Status.COMPLETED:\n        dispatch(filterActions.setFilterStatus(Status.COMPLETED));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleClickResetFilterQuery = () => {\n    setEnteredQuery('');\n    dispatch(filterActions.setFilterQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleChangeStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={enteredQuery}\n          onChange={handleChangeFilterQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {enteredQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClickResetFilterQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","export const debounce = (func: (query: string) => void, delay: number) => {\n  let timerId = 0;\n\n  return (...args: string[]) => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(func, delay, ...args);\n  };\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = React.memo(() => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { getUser } from '../../api';\n\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = React.memo(() => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  const handleClickCloseModal = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user || !selectedTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClickCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n\n    const loadedTodos = await getTodos();\n\n    dispatch(todosActions.setTodos(loadedTodos));\n\n    setIsLoading(false);\n    setIsDataLoaded(true);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {isDataLoaded && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}